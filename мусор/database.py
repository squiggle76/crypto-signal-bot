import psycopg2

# üîπ –ó–ê–ú–ï–ù–ò –≠–¢–£ –°–¢–†–û–ö–£ –Ω–∞ —Å–≤–æ—é —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ Neon.tech
DATABASE_URL = "postgresql://neondb_owner:npg_A8UYieglXhJ9@ep-tiny-wildflower-a8bf72pn-pooler.eastus2.azure.neon.tech/neondb?sslmode=require"

def connect_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    return psycopg2.connect(DATABASE_URL)

def create_table():
    """–°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –≤ PostgreSQL"""
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS market_events (
        id SERIAL PRIMARY KEY,
        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        symbol TEXT,
        event_type TEXT,
        price REAL,
        volume REAL,
        price_change_5min REAL,
        spoofing_volume REAL,
        spoofing_count INT DEFAULT 0,
        price_30min_ago REAL,
        volume_30min_ago REAL,
        spread_30min_ago REAL,
        last_spoofing_count INT DEFAULT 0
    );
    """)
    conn.commit()
    conn.close()
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞!")

def save_market_event(symbol, event_type, price, volume, price_change_5min, spoofing_volume=None, spoofing_count=0):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä—ã–Ω–∫–∞."""
    conn = connect_db()
    cursor = conn.cursor()

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è
    cursor.execute("""
        SELECT price, volume, spread, COUNT(*) 
        FROM market_events 
        WHERE symbol = %s AND timestamp >= NOW() - INTERVAL '30 minutes'
    """, (symbol,))
    row = cursor.fetchone()

    price_30min_ago = row[0] if row else None
    volume_30min_ago = row[1] if row else None
    spread_30min_ago = row[2] if row else None
    last_spoofing_count = row[3] if row else 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Spoofing-–æ–≤ –∑–∞ 30 –º–∏–Ω—É—Ç

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
    cursor.execute("""
        INSERT INTO market_events 
        (symbol, event_type, price, volume, price_change_5min, spoofing_volume, spoofing_count,
         price_30min_ago, volume_30min_ago, spread_30min_ago, last_spoofing_count)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
    """, (symbol, event_type, price, volume, price_change_5min, spoofing_volume, spoofing_count,
          price_30min_ago, volume_30min_ago, spread_30min_ago, last_spoofing_count))

    conn.commit()
    cursor.close()
    conn.close()
    print(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event_type} –¥–ª—è {symbol} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä—ã–Ω–∫–∞!")

def get_all_events():
    """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM market_events;")
    events = cursor.fetchall()
    conn.close()
    return events

# ‚úÖ –¢–µ–ø–µ—Ä—å –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
if __name__ == "__main__":
    create_table()  # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    print(get_all_events())  # –í—ã–≤–µ–¥–µ—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –±–∞–∑—ã
    print("‚úÖ Database script executed successfully!")
