# bot.py
import logging
import asyncio
import sys, os
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ config
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from config.config import TELEGRAM_TOKEN
from adaptive_threshold import AdaptiveThreshold
from binance_data import get_recent_price_changes
from movement_detector import is_sharp_movement

logging.basicConfig(level=logging.INFO)

bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –ø–æ user_id
user_pairs = {}

# –ú–æ–¥–µ–ª—å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
threshold_model = AdaptiveThreshold()

@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /help /status_threshold /setpair")

@dp.message(F.text == "/help")
async def cmd_help(message: types.Message):
    await message.answer("üõ† –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/status_threshold ‚Äî —Ç–µ–∫—É—â–∏–µ –ø–æ—Ä–æ–≥–∏ –¥–≤–∏–∂–µ–Ω–∏—è\n/setpair ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É")

@dp.message(F.text.startswith("/setpair"))
async def cmd_setpair(message: types.Message):
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /setpair BTCUSDT")
        return

    pair = parts[1].upper()
    user_id = message.from_user.id
    user_pairs[user_id] = pair

    await message.answer(f"‚úÖ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {pair}")

@dp.message(F.text == "/status_threshold")
async def cmd_status_threshold(message: types.Message):
    user_id = message.from_user.id
    pair = user_pairs.get(user_id, "BTCUSDT")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é BTCUSDT

    price_changes, volumes = get_recent_price_changes(pair=pair)

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –ø–æ—Ä–æ–≥–æ–≤
    if price_changes:
        threshold_model.update(pair, price_changes[-1])

    thresholds = {
        'price_speed': threshold_model.get_threshold(pair),
        'spoofing': sum(volumes) * 0.01 if volumes else 0.01
    }

    sharp = is_sharp_movement(pair, price_changes)
    movement_status = "üìà –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–µ–∑–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ!" if sharp else "üìâ –†–µ–∑–∫–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ."

    text = f"üìä –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è {pair}:\n"
    text += f"üíπ –°–∫–æ—Ä–æ—Å—Ç—å —Ü–µ–Ω—ã: {thresholds['price_speed']:.5f}\n"
    text += f"üßä Spoofing: {thresholds['spoofing']:.5f}\n"
    text += f"\n{movement_status}"

    await message.answer(text)

@dp.message()
async def log_all_messages(message: types.Message):
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)
    
